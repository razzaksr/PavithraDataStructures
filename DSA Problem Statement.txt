Array:
1. Prefix and suffix sum
2. Find Max Sum of Sub Array
3. Equilibrium Index of an array
4. Array Rotation Clock
5. Array Rotation Anti-Clock
6. Array Rotation Spiral
7. Inversion Count of Array
8. Find empty packages in chocolate factory
9. Coin change dispenser
10. Find Missing minimum element in array

technique:
1. brute force
2. greedy
3. divide and conq
4. dynamic programming
5. backtracking


11. Given N gold wires, each wire has a length associated with it. At a time, only two adjacent small wires are assembled at the end of a large wire and the cost of forming is the sum of their length. Find the minimum cost when all wires are assembled to form a single wire.
Note: using greedy approach
Example:
[1, 1, 6, 6, 7, 8]
[1, 6, 6, 7, 8, 8] 2
[1, 6, 7, 8, 8, 8] 9
[1, 7, 8, 8, 8, 8] 16
[1, 8, 8, 8, 8, 8] 24
[1, 9, 8, 8, 8, 8] 33
Minimum cost to assemble all gold wires: 33


1. Jump game VI,
You are given a 0-indexed integer array nums and an integer k.
You are initially standing at index 0. In one move, you can jump at most k steps forward without going outside the boundaries of the array. That is, you can jump from index i to any index in the range [i + 1, min(n - 1, i + k)] inclusive.
You want to reach the last index of the array (index n - 1). Your score is the sum of all nums[j] for each index j you visited in the array.
Return the maximum score you can get.
Example 1:
Input: nums = [1,-1,-2,4,-7,3], k = 2
Output: 7
Explanation: You can choose your jumps forming the subsequence [1,-1,4,3] (underlined above). The sum is 7.
Example 2:
Input: nums = [10,-5,-2,4,0,3], k = 3
Output: 17
Explanation: You can choose your jumps forming the subsequence [10,4,3] (underlined above). The sum is 17.
Example 3:
Input: nums = [1,-5,-20,4,-1,3,-6,-3], k = 2
Output: 0



2. Count the number of times a pattern appears in a given string as a subsequence
Google Translate Icon
Given a string, count the number of times a given pattern appears in it as a subsequence.
Please note that the problem specifically targets subsequences that need not be contiguous, i.e., subsequences are not required to occupy consecutive positions within the original sequences.
For example,
Input:
string = “subsequence”
pattern = “sue”
Output: 7 
subsequence
subsequence
subsequence
subsequence
subsequence
subsequence
subsequence

string = “subsequence”
pattern = “su”
Output: 3 



3. Word Break Problem – Dynamic Programming
Word Break Problem: Given a string and a dictionary of words, determine if the string can be segmented into a space-separated sequence of one or more dictionary words.
For example,
Input:
dict[] = { this, th, is, famous, Word, break, b, r, e, a, k, br, bre, brea, ak, problem };
word = Wordbreakproblem
Output:
Word b r e a k problem,Word b r e ak problem,Word br e a k problem,Word br e ak problem
Word bre a k problem,Word bre ak problem,Word brea k problem,Word break problem



4. Mike has arranged a small party for the inauguration of his new startup. He has invited all of his fellow employees who are N in number. These employees are indexed with an array starting from 1 to N. In this startup, everyone knows each other’s salary. We will represent salary by an integer value. Mike has to arrange tables, where he will accommodate everyone. But he is a little thrifty in that, he wants to adjust everyone in as few tables as he can. Tables of various seating are available. Let’s say the cost of renting each table is K. All the employees have to seat in the order of the index. The only problem is that the employees with the same salary can get into arguments which can ruin the party.
Mike came across the term inefficiency of arrangement, which can be defined as the sum of the cost of tables + the total number of people getting into arguments. Given the number of employees, N, and their salaries in array a[ ], he wants to find the optimal inefficiency, i.e., the smallest possible value for the inefficiency of arranging the N employees.


5. fruits in the knapsack you’d include getting maximum profit. Here’s the weight and profit of each fruit:

Items: { Apple, Orange, Banana, Melon }
Weight: { 2, 3, 1, 4 }
Profit: { 4, 5, 3, 7 }
Knapsack capacity: 5

Let’s try to put different combinations of fruits in the knapsack, such that their total weight is not more than 5.

Apple + Orange (total weight 5) => 9 profit
Apple + Banana (total weight 3) => 7 profit
Orange + Banana (total weight 4) => 8 profit
Banana + Melon (total weight 5) => 10 profit

This shows that Banana + Melon is the best combination, as it gives us the maximum profit and the total weight does not exceed the capacity


6. Tower of Hanoi using Recursion